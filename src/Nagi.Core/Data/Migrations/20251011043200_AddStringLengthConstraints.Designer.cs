// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nagi.Core.Data;

#nullable disable

namespace Nagi.Core.Data.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20251011043200_AddStringLengthConstraints")]
    partial class AddStringLengthConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("GenreSong");
                });

            modelBuilder.Entity("Nagi.Core.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverArtUri")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("Title");

                    b.HasIndex("Year");

                    b.HasIndex("Title", "ArtistId")
                        .IsUnique();

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Nagi.Core.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Biography")
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalImageCachePath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MetadataLastCheckedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("RemoteImageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Nagi.Core.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Nagi.Core.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Nagi.Core.Models.ListenHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEligibleForScrobbling")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScrobbled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ListenTimestampUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsScrobbled");

                    b.HasIndex("ListenTimestampUtc");

                    b.HasIndex("SongId");

                    b.ToTable("ListenHistory");
                });

            modelBuilder.Entity("Nagi.Core.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageUri")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Nagi.Core.Models.PlaylistSong", b =>
                {
                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlaylistId", "SongId");

                    b.HasIndex("SongId");

                    b.HasIndex("PlaylistId", "Order");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("Nagi.Core.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumArtUriFromTrack")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Bpm")
                        .HasColumnType("REAL");

                    b.Property<int?>("Channels")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Composer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Conductor")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Copyright")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DarkSwatchId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateAddedToLibrary")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectoryPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int?>("DiscCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscNumber")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FileCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FileModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grouping")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLoved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastPlayedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LightSwatchId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LrcFilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MusicBrainzReleaseId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MusicBrainzTrackId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SampleRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkipCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int?>("TrackCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("DateAddedToLibrary");

                    b.HasIndex("DirectoryPath");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("FolderId");

                    b.HasIndex("IsLoved");

                    b.HasIndex("LastPlayedDate");

                    b.HasIndex("PlayCount");

                    b.HasIndex("Title");

                    b.HasIndex("FolderId", "DirectoryPath");

                    b.HasIndex("AlbumId", "DiscNumber", "TrackNumber");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.HasOne("Nagi.Core.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nagi.Core.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nagi.Core.Models.Album", b =>
                {
                    b.HasOne("Nagi.Core.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Nagi.Core.Models.Folder", b =>
                {
                    b.HasOne("Nagi.Core.Models.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Nagi.Core.Models.ListenHistory", b =>
                {
                    b.HasOne("Nagi.Core.Models.Song", "Song")
                        .WithMany("ListenHistory")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Nagi.Core.Models.PlaylistSong", b =>
                {
                    b.HasOne("Nagi.Core.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nagi.Core.Models.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Nagi.Core.Models.Song", b =>
                {
                    b.HasOne("Nagi.Core.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Nagi.Core.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Nagi.Core.Models.Folder", "Folder")
                        .WithMany("Songs")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Nagi.Core.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Nagi.Core.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Nagi.Core.Models.Folder", b =>
                {
                    b.Navigation("Songs");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("Nagi.Core.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("Nagi.Core.Models.Song", b =>
                {
                    b.Navigation("ListenHistory");

                    b.Navigation("PlaylistSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
