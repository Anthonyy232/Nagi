# Workflow name for easy identification in the GitHub Actions UI.
name: Create Nagi Release with Velopack

# This workflow triggers on any push to the 'master' branch.
on:
  push:
    branches: [ master ]

jobs:
  build-and-release:
    runs-on: windows-latest
    
    strategy:
      matrix:
        platform: [win-x64, win-x86, win-arm64]

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and Format Version from Project Properties
        id: get_version
        shell: bash
        run: |
          four_part_version=$(grep -oE '<AppxPackageVersion>[^<]+' Directory.Build.props | sed 's/<AppxPackageVersion>//')
          three_part_version=$(echo "$four_part_version" | sed 's/\.[0-9]\+$//')
          echo "version=$three_part_version" >> $GITHUB_OUTPUT

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install/Update vpk command-line tool
        run: dotnet tool update -g vpk --prerelease

      - name: Create appsettings.json from Secrets
        shell: pwsh
        run: |
          echo '{
            "NagiApiServer": {
              "Url": "https://nagiappapi.azure-api.net/nagi",
              "ApiKey": "${{ secrets.NAGI_API_KEY }}",
              "SubscriptionKey": "${{ secrets.NAGI_SUBSCRIPTION_KEY }}"
            }
          }' > src/Nagi.WinUI/appsettings.json

      # ====================================================================
      # == NEW STEP: Create a NuGet config with retry and timeout settings ==
      # ====================================================================
      - name: Create NuGet.Config for build
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>' > NuGet.Config
          echo '<configuration>' >> NuGet.Config
          echo '  <config>' >> NuGet.Config
          echo '    <add key="globalPackagesFolder" value=".packages" />' >> NuGet.Config
          echo '  </config>' >> NuGet.Config
          echo '  <settings>' >> NuGet.Config
          echo '    <repositoryPath>./packages</repositoryPath>' >> NuGet.Config
          echo '  </settings>' >> NuGet.Config
          echo '</configuration>' >> NuGet.Config
        shell: bash

      - name: Clear NuGet Cache
        run: dotnet nuget locals all --clear

      # ====================================================================
      # == MODIFIED STEP: Added --force-evaluate for more resilience      ==
      # ====================================================================
      - name: Restore Dependencies
        run: dotnet restore src/Nagi.WinUI/Nagi.WinUI.csproj --force-evaluate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add environment variables for NuGet retry logic
          NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
          NUGET_HTTP_CACHE_PATH: ${{ github.workspace }}/.nuget/v3-cache

      - name: Build and Package Platform
        shell: pwsh
        run: |
          $p = "${{ matrix.platform }}"
          $publishDir = "./publish/$p"
          $releaseDir = "./Releases/$p"
          
          echo "Building for $p..."
          dotnet publish src/Nagi.WinUI/Nagi.WinUI.csproj -c ReleaseUnpackaged -r $p --self-contained -o $publishDir --no-restore
          
          echo "Packaging for $p..."
          vpk pack --packId Nagi --packVersion ${{ steps.get_version.outputs.version }} --mainExe Nagi.exe --packDir $publishDir -o $releaseDir --channel $p --runtime $p

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Nagi-Release-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}
          path: ./Releases/${{ matrix.platform }}/