# Workflow name for easy identification in the GitHub Actions UI.
name: Create Nagi Release with Velopack

# This workflow triggers on any push to the 'master' branch.
on:
  push:
    branches: [ master ]

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetches all history for all branches and tags for versioning.
          fetch-depth: 0

      - name: Get and Format Version from Project Properties
        id: get_version
        shell: bash
        run: |
          four_part_version=$(grep -oE '<AppxPackageVersion>[^<]+' Directory.Build.props | sed 's/<AppxPackageVersion>//')
          three_part_version=$(echo "$four_part_version" | sed 's/\.[0-9]\+$//')
          echo "version=$three_part_version" >> $GITHUB_OUTPUT

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install/Update vpk command-line tool
        run: dotnet tool update -g vpk --prerelease

      - name: Create appsettings.json from Secrets
        shell: pwsh
        run: |
          echo '{
            "NagiApiServer": {
              "Url": "https://nagiappapi.azure-api.net/nagi",
              "ApiKey": "${{ secrets.NAGI_API_KEY }}",
              "SubscriptionKey": "${{ secrets.NAGI_SUBSCRIPTION_KEY }}"
            }
          }' > src/Nagi/appsettings.json

      - name: Build and Package for Each Platform
        shell: pwsh
        run: |
          $platforms = "win-x64", "win-x86", "win-arm64"
          foreach ($p in $platforms) {
            $publishDir = "./publish/$p"
            $releaseDir = "./Releases/$p"
          
            echo "Building for $p..."
            dotnet publish src/Nagi/Nagi.csproj -c ReleaseUnpackaged -r $p --self-contained -o $publishDir
          
            echo "Packaging for $p..."
            # The --channel flag is the key to preventing conflicts.
            # It creates a separate release manifest for each platform.
            vpk pack --packId Nagi --packVersion ${{ steps.get_version.outputs.version }} --mainExe Nagi.exe --packDir $publishDir -o $releaseDir --channel $p
          }

      - name: Upload All Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Nagi-Release-${{ steps.get_version.outputs.version }}
          # This uploads the entire Releases folder, which now contains
          # sub-folders for win-x64, win-x86, and win-arm64, each with
          # its own installer and release files.
          path: ./Releases/