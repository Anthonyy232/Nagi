# .github/workflows/build.yml

name: Nagi CI/CD with Velopack

on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'

jobs:
  build-and-pack:
    name: Build & Pack (${{ matrix.platform }})
    runs-on: windows-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        platform: [win-x64, win-x86, win-arm64]

    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and Format Application Version
        id: get_version
        shell: bash
        run: |
          four_part_version=$(grep -oE '<AppxPackageVersion>[^<]+' Directory.Build.props | sed 's/<AppxPackageVersion>//')
          three_part_version=$(echo "$four_part_version" | sed 's/\.[0-9]\+$//')
          echo "version=$three_part_version" >> $GITHUB_OUTPUT

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install/Update Velopack CLI (vpk)
        run: dotnet tool update -g vpk --prerelease

      - name: Create appsettings.json from repository secrets
        shell: pwsh
        run: |
          $appSettings = @{
            Discord = @{
              AppId = "${{ secrets.NAGI_DISCORD_KEY }}"
            }
            NagiApiServer = @{
              Url = "https://nagiflexapiserver.azurewebsites.net"
              ApiKey = "${{ secrets.NAGI_API_KEY }}"
              SubscriptionKey = "${{ secrets.NAGI_SUBSCRIPTION_KEY }}"
            }
          }
          $appSettings | ConvertTo-Json -Depth 3 | Out-File -FilePath "src/Nagi.WinUI/appsettings.json" -Encoding UTF8

      - name: Build and Publish Application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          dotnet publish src/Nagi.WinUI/Nagi.WinUI.csproj
          -c ReleaseUnpackaged
          -r ${{ matrix.platform }}
          --self-contained false
          -o ./publish/${{ matrix.platform }}

      - name: Package with Velopack
        run: >
          vpk pack --packId Nagi
          --packVersion ${{ steps.get_version.outputs.version }}
          --mainExe Nagi.exe
          --packDir ./publish/${{ matrix.platform }}
          --outputDir ./Releases/${{ matrix.platform }}
          --channel ${{ matrix.platform }}
          --runtime ${{ matrix.platform }}

      - name: Upload Velopack release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VeloPack-Release-Assets-${{ matrix.platform }}
          path: ./Releases/${{ matrix.platform }}/

  create-github-release:
    name: Create GitHub Release
    runs-on: windows-latest
    needs: build-and-pack
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Install/Update Velopack CLI (vpk)
        run: dotnet tool update -g vpk --prerelease

      - name: Download all Velopack artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./Downloaded-Artifacts
          pattern: VeloPack-Release-Assets-*

      - name: Debug - List downloaded files
        shell: pwsh
        run: |
          Write-Host "Contents of Downloaded-Artifacts:"
          Get-ChildItem -Path "./Downloaded-Artifacts" -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Reorganize artifacts for upload
        shell: pwsh
        run: |
          $platforms = @("win-x64", "win-x86", "win-arm64")
          
          foreach ($platform in $platforms) {
            $platformDir = "./Releases/$platform"
            New-Item -ItemType Directory -Path $platformDir -Force
            
            # Look for the specific platform artifact directory
            $artifactDir = "./Downloaded-Artifacts/VeloPack-Release-Assets-$platform"
            if (Test-Path $artifactDir) {
              Write-Host "Processing artifacts for $platform from $artifactDir"
              $sourceFiles = Get-ChildItem -Path $artifactDir -Recurse -File
              foreach ($file in $sourceFiles) {
                Copy-Item -Path $file.FullName -Destination $platformDir -Force
                Write-Host "Copied $($file.Name) to $platformDir"
              }
            } else {
              Write-Warning "Artifact directory not found: $artifactDir"
            }
          }

      - name: Publish assets to GitHub Release (Draft)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $platforms = @("win-x64", "win-x86", "win-arm64")
          $repoUrl = "https://github.com/${{ github.repository }}"
          $releaseName = "Version ${{ github.ref_name }}"

          foreach ($platform in $platforms) {
            Write-Host "Uploading assets for channel: $platform"
            
            $platformDir = "./Releases/$platform"
            if (Test-Path $platformDir) {
              $files = Get-ChildItem -Path $platformDir -File
              Write-Host "Found $($files.Count) files in $platformDir"
              
              if ($files.Count -gt 0) {
                try {
                  vpk upload github `
                    --repoUrl $repoUrl `
                    --token "${{ env.GITHUB_TOKEN }}" `
                    --releaseName $releaseName `
                    --channel $platform `
                    --outputDir $platformDir `
                    --merge
                  Write-Host "Successfully uploaded assets for $platform"
                } catch {
                  Write-Error "Failed to upload assets for $platform`: $_"
                  exit 1
                }
              } else {
                Write-Warning "No files found in $platformDir"
              }
            } else {
              Write-Warning "Directory $platformDir does not exist"
            }
          }