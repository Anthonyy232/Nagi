# .github/workflows/build.yml

name: Nagi CI/CD with Velopack

on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'

jobs:
  build-and-pack:
    name: Build & Pack (${{ matrix.platform }})
    runs-on: windows-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        platform: [win-x64, win-x86, win-arm64]

    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and Format Application Version
        id: get_version
        shell: bash
        run: |
          four_part_version=$(grep -oE '<AppxPackageVersion>[^<]+' Directory.Build.props | sed 's/<AppxPackageVersion>//')
          three_part_version=$(echo "$four_part_version" | sed 's/\.[0-9]\+$//')
          echo "version=$three_part_version" >> $GITHUB_OUTPUT

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install/Update Velopack CLI (vpk)
        run: dotnet tool update -g vpk --prerelease

      - name: Create appsettings.json from repository secrets
        shell: pwsh
        run: |
          echo '{
            "Discord": {
              "AppId": "${{ secrets.NAGI_DISCORD_KEY }}"
            },
            "NagiApiServer": {
              "Url": "https://nagiflexapiserver.azurewebsites.net",
              "ApiKey": "${{ secrets.NAGI_API_KEY }}",
              "SubscriptionKey": "${{ secrets.NAGI_SUBSCRIPTION_KEY }}"
            }
          }' > src/Nagi.WinUI/appsettings.json

      - name: Build and Publish Application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          dotnet publish src/Nagi.WinUI/Nagi.WinUI.csproj
          -c ReleaseUnpackaged
          -r ${{ matrix.platform }}
          --self-contained
          -o ./publish/${{ matrix.platform }}

      - name: Package with Velopack
        run: >
          vpk pack --packId Nagi
          --packVersion ${{ steps.get_version.outputs.version }}
          --mainExe Nagi.exe
          --packDir ./publish/${{ matrix.platform }}
          -o ./Releases/${{ matrix.platform }}
          --channel ${{ matrix.platform }}
          --runtime ${{ matrix.platform }}

      - name: Upload Velopack release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VeloPack-Release-Assets-${{ matrix.platform }}
          path: ./Releases/${{ matrix.platform }}/

  create-github-release:
    name: Create GitHub Release
    runs-on: windows-latest
    needs: build-and-pack
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Install/Update Velopack CLI (vpk)
        run: dotnet tool update -g vpk --prerelease

      - name: Download all Velopack artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./VeloPack-Release-Assets
          pattern: VeloPack-Release-Assets-*
          merge-multiple: true

      - name: Publish assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $platforms = "win-x64", "win-x86", "win-arm64"
          $isFirst = $true

          foreach ($p in $platforms) {
            echo "Uploading assets for channel: $p"

            # Build an array of arguments. This is the safest way to pass args in PowerShell.
            $arguments = @(
                "upload", "github",
                "--repoUrl", "https://github.com/${{ github.repository }}",
                "--token", "${{ env.GITHUB_TOKEN }}",
                "--releaseName", "Version ${{ github.ref_name }}",
                "--channel", $p,
                "-o", "./VeloPack-Release-Assets"
            )

            # For subsequent iterations, append the crucial flag to the argument list.
            if (-not $isFirst) {
                $arguments += "--add-to-existing"
            }

            # Execute the command with the argument list. No string parsing issues.
            vpk $arguments

            $isFirst = $false
          }